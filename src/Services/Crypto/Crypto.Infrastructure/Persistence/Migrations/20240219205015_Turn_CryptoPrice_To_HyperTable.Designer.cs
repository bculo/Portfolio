// <auto-generated />
using System;
using Crypto.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Crypto.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(CryptoDbContext))]
    [Migration("20240219205015_Turn_CryptoPrice_To_HyperTable")]
    partial class Turn_CryptoPrice_To_HyperTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Crypto.Core.Entities.Crypto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdon");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("logo");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifiedon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.Property<string>("SourceCode")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("sourcecode");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("symbol");

                    b.Property<string>("WebSite")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("website");

                    b.HasKey("Id")
                        .HasName("pk_crypto");

                    b.HasIndex("Symbol")
                        .IsUnique()
                        .HasDatabaseName("ix_crypto_symbol");

                    b.ToTable("crypto", (string)null);
                });

            modelBuilder.Entity("Crypto.Core.Entities.CryptoPrice", b =>
                {
                    b.Property<Guid>("CryptoId")
                        .HasColumnType("uuid")
                        .HasColumnName("cryptoid");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("price");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time");

                    b.HasIndex("CryptoId")
                        .HasDatabaseName("ix_crypto_price_cryptoid");

                    b.ToTable("crypto_price", (string)null);
                });

            modelBuilder.Entity("Crypto.Core.Entities.Visit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdon");

                    b.Property<Guid>("CryptoId")
                        .HasColumnType("uuid")
                        .HasColumnName("cryptoid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifiedon");

                    b.HasKey("Id")
                        .HasName("pk_visit");

                    b.HasIndex("CryptoId")
                        .HasDatabaseName("ix_visit_cryptoid");

                    b.ToTable("visit", (string)null);
                });

            modelBuilder.Entity("Crypto.Core.Entities.CryptoPrice", b =>
                {
                    b.HasOne("Crypto.Core.Entities.Crypto", "Crypto")
                        .WithMany()
                        .HasForeignKey("CryptoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_crypto_price_crypto_cryptoid");

                    b.Navigation("Crypto");
                });

            modelBuilder.Entity("Crypto.Core.Entities.Visit", b =>
                {
                    b.HasOne("Crypto.Core.Entities.Crypto", "Crypto")
                        .WithMany("Visits")
                        .HasForeignKey("CryptoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_visit_cryptos_cryptoid");

                    b.Navigation("Crypto");
                });

            modelBuilder.Entity("Crypto.Core.Entities.Crypto", b =>
                {
                    b.Navigation("Visits");
                });
#pragma warning restore 612, 618
        }
    }
}
