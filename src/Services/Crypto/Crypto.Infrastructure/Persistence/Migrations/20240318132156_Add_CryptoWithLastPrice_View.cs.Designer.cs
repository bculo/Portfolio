// <auto-generated />
using System;
using Crypto.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Crypto.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(CryptoDbContext))]
    [Migration("20240318132156_Add_CryptoWithLastPrice_View.cs")]
    partial class Add_CryptoWithLastPrice_Viewcs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Crypto.Core.Entities.Crypto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdon");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Logo")
                        .HasColumnType("text")
                        .HasColumnName("logo");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifiedon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.Property<string>("SourceCode")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("sourcecode");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("symbol");

                    b.Property<string>("WebSite")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("website");

                    b.HasKey("Id")
                        .HasName("pk_crypto");

                    b.HasIndex("Symbol")
                        .IsUnique()
                        .HasDatabaseName("ix_crypto_symbol");

                    b.ToTable("crypto", (string)null);
                });

            modelBuilder.Entity("Crypto.Core.Entities.CryptoPrice", b =>
                {
                    b.Property<Guid>("CryptoId")
                        .HasColumnType("uuid")
                        .HasColumnName("cryptoid");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("price");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time");

                    b.HasIndex("CryptoId")
                        .HasDatabaseName("ix_crypto_price_cryptoid");

                    b.ToTable("crypto_price", (string)null);
                });

            modelBuilder.Entity("Crypto.Core.Entities.Visit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdon");

                    b.Property<Guid>("CryptoId")
                        .HasColumnType("uuid")
                        .HasColumnName("cryptoid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifiedon");

                    b.HasKey("Id")
                        .HasName("pk_visit");

                    b.HasIndex("CryptoId")
                        .HasDatabaseName("ix_visit_cryptoid");

                    b.ToTable("visit", (string)null);
                });

            modelBuilder.Entity("Crypto.Core.ReadModels.CryptoTimeFrameReadModel", b =>
                {
                    b.Property<decimal>("AvgPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("avgprice");

                    b.Property<Guid>("CryptoId")
                        .HasColumnType("uuid")
                        .HasColumnName("cryptoid");

                    b.Property<decimal>("LastPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("lastprice");

                    b.Property<decimal>("MaxPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("maxprice");

                    b.Property<decimal>("MinPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("minprice");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("SourceCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sourcecode");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("symbol");

                    b.Property<DateTimeOffset>("TimeBucket")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timebucket");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("website");

                    b.ToTable("CryptoTimeFrameReadModel", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Crypto.Infrastructure.Consumers.State.AddCryptoItemState", b =>
                {
                    b.Property<Guid>("CorrelationId")
                        .HasColumnType("uuid")
                        .HasColumnName("correlationid");

                    b.Property<Guid?>("AddCryptoItemTimeoutTokenId")
                        .HasColumnType("uuid")
                        .HasColumnName("addcryptoitemtimeouttokenid");

                    b.Property<string>("CurrentState")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("currentstate");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("symbol");

                    b.HasKey("CorrelationId")
                        .HasName("pk_addcryptoitemstate");

                    b.ToTable("addcryptoitemstate", (string)null);
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.InboxState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("Consumed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("consumed");

                    b.Property<Guid>("ConsumerId")
                        .HasColumnType("uuid")
                        .HasColumnName("consumerid");

                    b.Property<DateTime?>("Delivered")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delivered");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expirationtime");

                    b.Property<long?>("LastSequenceNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("lastsequencenumber");

                    b.Property<Guid>("LockId")
                        .HasColumnType("uuid")
                        .HasColumnName("lockid");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("messageid");

                    b.Property<int>("ReceiveCount")
                        .HasColumnType("integer")
                        .HasColumnName("receivecount");

                    b.Property<DateTime>("Received")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("received");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("rowversion");

                    b.HasKey("Id")
                        .HasName("pk_inboxstate");

                    b.HasAlternateKey("MessageId", "ConsumerId")
                        .HasName("ak_inboxstate_messageid_consumerid");

                    b.HasIndex("Delivered")
                        .HasDatabaseName("ix_inboxstate_delivered");

                    b.ToTable("inboxstate", (string)null);
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.OutboxMessage", b =>
                {
                    b.Property<long>("SequenceNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequencenumber");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SequenceNumber"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("contenttype");

                    b.Property<Guid?>("ConversationId")
                        .HasColumnType("uuid")
                        .HasColumnName("conversationid");

                    b.Property<Guid?>("CorrelationId")
                        .HasColumnType("uuid")
                        .HasColumnName("correlationid");

                    b.Property<string>("DestinationAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("destinationaddress");

                    b.Property<DateTime?>("EnqueueTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enqueuetime");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expirationtime");

                    b.Property<string>("FaultAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("faultaddress");

                    b.Property<string>("Headers")
                        .HasColumnType("text")
                        .HasColumnName("headers");

                    b.Property<Guid?>("InboxConsumerId")
                        .HasColumnType("uuid")
                        .HasColumnName("inboxconsumerid");

                    b.Property<Guid?>("InboxMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("inboxmessageid");

                    b.Property<Guid?>("InitiatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("initiatorid");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("messageid");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("messagetype");

                    b.Property<Guid?>("OutboxId")
                        .HasColumnType("uuid")
                        .HasColumnName("outboxid");

                    b.Property<string>("Properties")
                        .HasColumnType("text")
                        .HasColumnName("properties");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uuid")
                        .HasColumnName("requestid");

                    b.Property<string>("ResponseAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("responseaddress");

                    b.Property<DateTime>("SentTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("senttime");

                    b.Property<string>("SourceAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("sourceaddress");

                    b.HasKey("SequenceNumber")
                        .HasName("pk_outboxmessage");

                    b.HasIndex("EnqueueTime")
                        .HasDatabaseName("ix_outboxmessage_enqueuetime");

                    b.HasIndex("ExpirationTime")
                        .HasDatabaseName("ix_outboxmessage_expirationtime");

                    b.HasIndex("OutboxId", "SequenceNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_outboxmessage_outboxid_sequencenumber");

                    b.HasIndex("InboxMessageId", "InboxConsumerId", "SequenceNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_outboxmessage_inboxmessageid_inboxconsumerid_sequencenumber");

                    b.ToTable("outboxmessage", (string)null);
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.OutboxState", b =>
                {
                    b.Property<Guid>("OutboxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("outboxid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateTime?>("Delivered")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delivered");

                    b.Property<long?>("LastSequenceNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("lastsequencenumber");

                    b.Property<Guid>("LockId")
                        .HasColumnType("uuid")
                        .HasColumnName("lockid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("rowversion");

                    b.HasKey("OutboxId")
                        .HasName("pk_outboxstate");

                    b.HasIndex("Created")
                        .HasDatabaseName("ix_outboxstate_created");

                    b.ToTable("outboxstate", (string)null);
                });

            modelBuilder.Entity("Crypto.Core.Entities.CryptoPrice", b =>
                {
                    b.HasOne("Crypto.Core.Entities.Crypto", "Crypto")
                        .WithMany()
                        .HasForeignKey("CryptoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_crypto_price_crypto_cryptoid");

                    b.Navigation("Crypto");
                });

            modelBuilder.Entity("Crypto.Core.Entities.Visit", b =>
                {
                    b.HasOne("Crypto.Core.Entities.Crypto", "Crypto")
                        .WithMany("Visits")
                        .HasForeignKey("CryptoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_visit_cryptos_cryptoid");

                    b.Navigation("Crypto");
                });

            modelBuilder.Entity("Crypto.Core.Entities.Crypto", b =>
                {
                    b.Navigation("Visits");
                });
#pragma warning restore 612, 618
        }
    }
}
